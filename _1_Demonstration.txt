Introduction to C++
C++ is a high-level, object-oriented programming language used for developing applications, games, and system software

preprocessor directives 
Preprocessor directives in C++ begin with '#' and are used to give instructions to the compiler before compiling the code, such as including header files or defining constants.

keywords in C++
 Keywords in C++ are special words that have predefined meanings and are reserved for specific purposes. Here are some examples of keywords in C++:

    "int" is a keyword used to declare integer variables. For example: int x = 5;
    "float" is a keyword used to declare floating-point variables. For example: float y = 3.14;
    "if" is a keyword used for conditional statements. For example: if (x > y) { ... }
    "while" is a keyword used for loops. For example: while (x < 10) { ... }
    "class" is a keyword used to define a class. For example: class MyClass { ... };
    "namespace" is a keyword used to define a namespace. For example: namespace MyNamespace { ... };
    
    C++Identifiers
    In C++, an identifier is a name given to a variable, function, class, or other user-defined entity. An identifier can consist of letters, digits, and underscores, and must begin with a letter or underscore. Identifiers are case sensitive and should be chosen to be descriptive and meaningful. Examples of valid identifiers in C++ include "myVar", "some_function", and "MyClass".
    examples
 Variables: int myAge, double mySalary, bool isFinished
Functions: void printMessage(), int calculateSum(int a, int b), double calculateArea(double radius)
Classes: class Car, class Person, class Student
Constants: const int MAX_SIZE = 100, const double PI = 3.14159

c++ comments
In C++, comments are used to add explanatory text that is ignored by the compiler. There are two types of comments in C++:

   1.  Single-line comments: Begin with two forward slashes (//) and continue to the end of the line. Example: // This is a single-line comment.

    2 Multi-line comments: Begin with a forward slash followed by an asterisk (/) and end with an asterisk followed by a forward slash (/). Example:
    /*
This is a multi-line comment.
It can span multiple lines.
*/


C++ Variables
In C++, variables are used to store data in memory. Before using a variable, it must be declared with a data type and an identifier. Here are some examples of how to declare and create variables in C++:
int age; // variable declaration
age = 30; // variable initialization
int x, y, z;
x =9; // assigning values to variables

Basic data types and their ranges
C++ supports several basic data types, which are used to represent different kinds of values in memory. Here is a list of the basic data types in C++:
    char: 1 byte, range from -128 to 127 or 0 to 255 (if unsigned)

    int: 4 bytes, range from -2,147,483,648 to 2,147,483,647

    short: 2 bytes, range from -32,768 to 32,767

    long: 4 bytes, range from -2,147,483,648 to 2,147,483,647

    long long: 8 bytes, range from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807

    float: 4 bytes, range from approximately 1.2E-38 to 3.4E+38 with 6 decimal places of precision

    double: 8 bytes, range from approximately 2.3E-308 to 1.7E+308 with 15 decimal places of precision

    bool: 1 byte, can store true (1) or false (0)

Note that the actual range and size of each data type may depend on the compiler and operating system being used. Additionally, there are other data types in C++ that are less commonly used or are specific to certain applications or libraries.


C++ operators
operators in C++ are symbols that are used to perform various operations on operands such as variables, constants, and expressions. C++ supports a wide range of operators, including:

    Arithmetic operators: Used to perform arithmetic operations on operands. Examples: + (addition), - (subtraction), * (multiplication), / (division), and % (modulus).

    Assignment operators: Used to assign a value to a variable. Examples: = (simple assignment), += (add and assign), -= (subtract and assign), *= (multiply and assign), /= (divide and assign), and %= (modulus and assign).

    Comparison operators: Used to compare two values and return a Boolean result. Examples: == (equality), != (inequality), < (less than), > (greater than), <= (less than or equal to), and >= (greater than or equal to).

    Logical operators: Used to combine Boolean expressions and return a Boolean result. Examples: && (logical AND), || (logical OR), and ! (logical NOT).

    Bitwise operators: Used to perform bitwise operations on binary values. Examples: & (bitwise AND), | (bitwise OR), ^ (bitwise XOR), ~ (bitwise NOT), << (left shift), and >> (right shift).

    Increment and decrement operators: Used to increment or decrement the value of a variable by 1. Examples: ++ (increment), -- (decrement).

    Ternary operator: Used to provide a shortcut for an if-else statement. Example: (condition) ? value_if_true : value_if_false.
    
    Increment and decrement operators
    Increment and decrement operators are used to increment or decrement the value of a variable by 1 in C++.

The increment operator (++) adds 1 to the value of a variable, while the decrement operator (--) subtracts 1 from the value of a variable. These operators can be used with both integer and floating-point variables.

Here are some examples of how to use these operators in C++:

int num = 5;
num++; // Increment the value of num by 1
cout << "num after increment: " << num << endl;

int count = 10;
count--; // Decrement the value of count by 1
cout << "count after decrement: " << count << endl;

float value = 3.14;
value++; // Increment the value of value by 1
cout << "value after increment: " << value << endl;

//num after increment: 6
//count after decrement: 9
//value after increment: 4.14

Simple data type conversion
Type conversion in C++ refers to the process of converting one data type to another. C++ provides two types of type conversion: implicit type conversion (also called type coercion) and explicit type conversion (also called type casting).

Implicit type conversion is performed automatically by the compiler when necessary, without the need for any special syntax. For example, when you assign a value of a smaller data type to a variable of a larger data type, the value is automatically converted to the larger type.

Here is an example of implicit type conversion:
int num1 = 5;
double num2 = num1; // Implicitly convert int to double

Explicit type conversion, on the other hand, requires the use of a special syntax to convert one data type to another. This can be done using the C++ cast operator or the functional notation.

Here are some examples of explicit type conversion:
double num1 = 3.14;
int num2 = static_cast<int>(num1); // Cast double to int using static_cast

int num3 = 10;
double num4 = (double) num3; // Cast int to double using functional notation










